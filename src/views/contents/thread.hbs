{{> header }}
{{> topNavigator }}

{{> contents/contentsCreateModal }}
{{> contents/contentsUpdateModal }}
{{> contents/contentsSubCreateModal }}

<script>
  function generateContentOnce(data,isLast) {
    let d = `
        <div class="container-fluid border rounded shadow">
          <div class="row">
            <div class="col-10">
              <div class="contents-title-area">
                <div class="dropdown contents-index-contents-navbar-nav">
                  <button class="btn dropdown-toggle contents-index-contents-navbar-button" data-bs-toggle="dropdown" aria-expanded="false">
                    <span class="material-icons">menu</span>
                  </button>
                  <ul class="dropdown-menu">
                    <li><a class="dropdown-item" onclick="contentsUpdateModal_setTarget('${data.id}')">{{ __ "page.contents.thread.contents.menu.update" }}</a></li>`
    if (!isLast){
      d += `
                    <li><a class="dropdown-item" onclick="contentSubCreateModal_setTarget('${data.id}')">{{ __ "page.contents.thread.contents.menu.reply" }}</a></li>`
    }else{
      d += `
                    <li><a class="dropdown-item" onclick="contentCreateModal_setTarget('${data.id}')">{{ __ "page.contents.thread.contents.menu.create" }}</a></li>`
    }
    d += `
                  </ul>
                </div>
                &nbsp;
                <div class="contents-title">
                  ${escape_html(data.title)}
                </div>
              </div>
              <!-- contents_id:${data.id} -->
            </div>
            <div class="col-2 text-end">
              <a class="userLink"
                href="{{ baseUrl }}/users/${data.created_user.id}"><span class="dfs-7">${escape_html(data.created_user.display_name)}</span></a><br>
            </div>
          </div>
          <div class="row">
            <div class="col-1">
              &nbsp;
            </div>
            <div class="col-11">
              ${data.contents}
            </div>
          </div>
          <div class="row">
            <div class="col text-end">
              <p><span class="dfs-8">${escape_html(data.updated_at_str)}</span></p>
            </div>
          </div>
        </div>
    `;
    return d;
  }

  let threadAllData = {
    contents: [],
  };
  // data
  //   |- contents[]
  function insertData(contentsId,data,addData){
    // 現在の階層に追加するか？
    let currentId = null;
    if (data.contents === undefined || data.contents === null){
      // DO NOTHING
    }else{
      for(let i=0;i<data.contents.length;i++){
        if (data.contents[i] === null) continue;
        if (data.contents[i].id === contentsId){
          currentId = i;
          break;
        }
      }
    }
    if (currentId !== null) {
      // 現在の階層に追加する
      let addDataCount = 0;
      for(let i=0;i<addData.length;i++){
        if (addData[i] === null){
          // nullは書く
          if (data.contents[currentId+i] === null){
            data.contents[currentId+i] = addData[i];
          }else{
            data.contents.splice(currentId+i, 0, addData[i]);
            addDataCount++;
          }
        }else{
          let dataId = null;
          for(let j=i;j<data.contents.length;j++){
            if (data.contents[j] === null){addHaveNull = true;continue;}
            if (data.contents[j].id === addData[i].id){
              // 既に存在する
              dataId = j;
              break;
            }
          }
          if (dataId !== null){
            // 既に存在する
            const existingData = JSON.parse(JSON.stringify(data.contents[dataId]));
            data.contents[dataId] = addData[i];
            if (existingData.children !== undefined && existingData.children !== null){
              if (addData[i].children !== undefined && addData[i].children !== null){
                // どっちも読み込み済み……
                const d = {
                  contents: existingData.children
                };
                if (insertData(contentsId,d,addData[i].children)){
                  data.contents[dataId].children = d.contents;
                }
              }else{
                // 現状のものを保持
                data.contents[dataId].children = existingData.children;
              }
            }
          }else{
            data.contents.splice(currentId+i, 0, addData[i]);
            addDataCount++;
          }
        }
      }
      // NULLを削除する
      if (addDataCount > 0){
        for(let i=data.contents.length-1;i>currentId+addDataCount;i--){
          if (data.contents[i] === null ||
              data.contents[i].id === undefined ||
              data.contents[i].id === null) {
            data.contents.splice(i, 1);
            break;
          }
        }
      }
      return true;
    }else{
      // 子要素を探してみる
      if (data.contents === undefined || data.contents === null){
        // DO NOTHING
      }else{
        for(let i=0;i<data.contents.length;i++){
          if (data.contents[i] === null) continue;
          if (!data.contents[i].id) continue;
          if (data.contents[i].children === undefined){
            data.contents[i].children = null;
          }
          if (data.contents[i].children !== null){
            const d = {
              contents: data.contents[i].children
            };
            if (insertData(contentsId,d,addData)){
              data.contents[i].children = d.contents;
              return true;
            }
          }
        }
      }
    }
    return false;
  }
  function calcUpdateOmitCount(data, count){
    let dataCount = 0;
    for(let i=0;i<data.length;i++){
      if (data[i] === null) continue;
      dataCount++;
      if (data[i].children){
        calcUpdateOmitCount(data[i].children, data[i].childCount || 0);
      }
    }
    if (count < dataCount){
      // not omit
      // DO NOTHING
    }else{
      const omitCount = count - dataCount;
      for(let i=0;i<data.length;i++){
        if (data[i] !== null) continue;
        data[i] = {
          omitCount
        };
        break;
      }
    }
  }
  function loadThread(startContentsId,subtree, listOnly, treeOnly){
    $.ajax({
      url: "{{baseUrl}}/api/contents/thread/"+startContentsId 
             + "?" + (subtree > 0 ? "subtree=" + subtree : "")
             + "&" + (listOnly ? "listOnly=1" : "listOnly=0")
             + "&" + (treeOnly ? "treeOnly=1" : "treeOnly=0"),
      type: "GET",
      dataType: "json",
      success: function(data) {
        if (startContentsId === {{thread.root_contents_id}}){
          threadAllData.contents = data.contents;
        }else{
          insertData(startContentsId,threadAllData,data.contents);
        }
        if (!threadAllData.count){
          threadAllData.count = data.count;
        }
        calcUpdateOmitCount(threadAllData.contents, threadAllData.count);
        generateContent(threadAllData);
      },
      error: function(xhr, status, error) {
        alert("{{ __ 'page.thread.loadError' }}");
      }
    });
  }

  /*
    data
      |- contents[]
      |    - title, ...
      |    - children[]
              |- contents[]
  */
  function generateContentSub(area,contentsList,parentId) {
    if (contentsList === null){
      // not load
      area.append($("<div>").addClass("wave-comment").html("<a class='omitLoad' onclick='loadThread(" + parentId + ",1,false,true)'>{{ __ 'page.thread.omission' }}</a>"));
    }else if (contentsList.length === 0){
      // DO NOTHING
    }else{
      let lastLoadedId = null;
      for(let i=0;i<contentsList.length;i++){
        if (contentsList[i] === null || !contentsList[i].id){
          // not load
          if (contentsList[i] === null || !contentsList[i].omitCount) {
            area.append($("<div>").addClass("wave-comment").html("<a class='omitLoad' onclick='loadThread(" + lastLoadedId + ",0,true,false)'>{{ __ 'page.thread.omission' }}</a>"));
          }else{
            const omitCount = contentsList[i].omitCount;
            area.append($("<div>").addClass("wave-comment").html("<a class='omitLoad' onclick='loadThread(" + lastLoadedId + ",0,true,false)'>" + format_string("{{ __ 'page.thread.omitCount' }}", omitCount) + "</a>"));
          }
          if (i !== contentsList.length - 1){
            const areaChild = $("<div>").addClass("vtree-areaChild");
            areaChild.append($("<div>").addClass("vtree-dirvr"));
            area.append(areaChild);
          }
          continue;
        }
        lastLoadedId = contentsList[i].id;
        area.append(generateContentOnce(contentsList[i], i === contentsList.length - 1));
        let areaChild = null;
        let hasChild = false;
        if (contentsList[i].children) {
          hasChild = contentsList[i].children.length > 0;
        }else{
          hasChild = true;
        }
        const isLast = i === contentsList.length - 1;
        if (!isLast || hasChild){
          areaChild = $("<div>").addClass("vtree-areaChild");
          areaChild.append($("<div>").addClass("vtree-dirvr"));
          area.append(areaChild);
        }
        if (contentsList[i].children === null || (contentsList[i].children && contentsList[i].children.length > 0)) {
          if (!areaChild){
            areaChild = $("<div>").addClass("vtree-areaChild");
            areaChild.append($("<div>").addClass("vtree-dirvr"));
            area.append(areaChild);
          }
          areaChild.append($("<div>").addClass("vtree-dirhr"));
          const subarea = $("<div>").addClass("vtree-area");
          areaChild.append(subarea);
          generateContentSub(subarea, contentsList[i].children, contentsList[i].id);
        }
      }
    }
  }
  function generateContent(data) {
    $('#contentArea').empty();
    if (!data || !data.contents) {
      return;
    }
    const area = $("<div>").addClass("vtree-area");
    generateContentSub(area, data.contents, {{thread.root_contents_id}});
    $('#contentArea').append(area);
    contentDirectCreate_setTarget(data.contents[data.contents.length -1].id, data.contents[data.contents.length -1].title);
  }

  addEventListener("load", async (event) => {
    /*
    data.contents = [
        {
          id: 1,
          title: "Test Title1",
          created_user: {
            id: 1,
            display_name: "Test User"
          },
          contents: "This is a test content.",
          updated_at_str: "2023-01-01"
        },
        {
          id: 2,
          title: "Test Title2",
          created_user: {
            id: 1,
            display_name: "Test User"
          },
          contents: "This is a test content.",
          updated_at_str: "2023-01-01"
        },
        null,
        {
          id: 4,
          title: "Test Title4",
          created_user: {
            id: 1,
            display_name: "Test User"
          },
          contents: "This is a test content.",
          updated_at_str: "2023-01-01"
        },
        {
          omitCount: 1,
        },
        {
          id: 6,
          title: "Test Title6",
          created_user: {
            id: 1,
            display_name: "Test User"
          },
          contents: "This is a test content.",
          updated_at_str: "2023-01-01"
        }
    ];
    insertData(2,data, {
      contents: [
        {
          id: 3,
          title: "Test Title3",
          created_user: {
            id: 1,
            display_name: "Test User"
          },
          contents: "This is a test content.",
          updated_at_str: "2023-01-01",
          children: [
            {
              id: 31,
              title: "Test Title3-1",
              created_user: {
                id: 1,
                display_name: "Test User"
              },
              contents: "This is a test content.",
              updated_at_str: "2023-01-01"
            },
            {
              omitCount: 1,
            },
            {
              id: 33,
              title: "Test Title3-3",
              created_user: {
                id: 1,
                display_name: "Test User"
              },
              contents: "This is a test content.",
              updated_at_str: "2023-01-01"
            }
          ]
        }
      ]
    })
    insertData(4,data,{
      contents: [
        {
          id: 5,
          title: "Test Title5",
          created_user: {
            id: 1,
            display_name: "Test User"
          },
          contents: "This is a test content.",
          updated_at_str: "2023-01-01"
        }
      ]
    })
    generateContent(data)
    */
    /*
    generateContent({
      contents: [
        {
          title: "Test Title1",
          created_user: {
            id: 1,
            display_name: "Test User"
          },
          contents: "This is a test content.",
          updated_at_str: "2023-01-01"
        },
        {
          title: "Test Title2",
          created_user: {
            id: 1,
            display_name: "Test User"
          },
          contents: "This is a test content.",
          updated_at_str: "2023-01-01"
        },
        null,
        {
          title: "Test Title3",
          created_user: {
            id: 1,
            display_name: "Test User"
          },
          contents: "This is a test content.",
          updated_at_str: "2023-01-01",
          children: [
            {
              title: "Test Title3-1",
              created_user: {
                id: 1,
                display_name: "Test User"
              },
              contents: "This is a test content.",
              updated_at_str: "2023-01-01"
            },
            {
              title: "Test Title3-2",
              created_user: {
                id: 1,
                display_name: "Test User"
              },
              contents: "This is a test content.",
              updated_at_str: "2023-01-01",
              children: [
                null
              ]
            },
            {
              title: "Test Title3-3",
              created_user: {
                id: 1,
                display_name: "Test User"
              },
              contents: "This is a test content.",
              updated_at_str: "2023-01-01"
            }
          ]
        },
        {
          title: "Test Title4",
          created_user: {
            id: 1,
            display_name: "Test User"
          },
          contents: "This is a test content.",
          updated_at_str: "2023-01-01"
        }
      ]
    })
    */
    loadThread({{thread.root_contents_id}},0,true);
    const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
    const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));
  });
</script>

<div class="container-fluid">
  <div class="row">
    <div class="col-lg-7">
      <nav id="breadcrumb" aria-label="breadcrumb">
        <ol id="breadcrumbList" class="breadcrumb">
          <li class="breadcrumb-item"><a href="{{baseUrl}}/contents">{{ __ 'page.thread.breadcrumb.dashboard' }}</a></li>
          {{#each thread.dir_ids}}
            <li class="breadcrumb-item"><a href="{{@root.baseUrl}}/contents?treeId={{this}}">{{ lookup @root.thread.dir_names @index }}</a></li>
          {{/each}}
        </ol>
      </nav>
    </div>
    <div class="col-lg-4 text-end">
      <div id="tags">
        {{#each thread.tags}}
          <span class="badge text-bg-light" data-tag-id="{{this.id}}">{{this.display_name}}</span> 
        {{/each}}
      </div>
    </div>
    <div class="col-lg-1 text-end">
      <div id="info">
        <a class="userLink"
          href="{{ baseUrl }}/users/{{ thread.created_user.id }}"
          data-bs-toggle="tooltip" data-bs-html="true"
          data-bs-title="<div class='text-start'>{{ __ 'page.thread.info.createdAt' }}: {{ thread.created_at_str }}<br>
          {{ __ 'page.thread.info.updatedAt' }}: {{ thread.last_updated_at_str }}<br>
          {{ __ 'page.thread.info.author' }}: {{ thread.created_user.display_name }}</div>">
          <span class="dfs-7">{{ __ "page.thread.info.author" }}: {{ thread.created_user.display_name }}</span>
        </a>
      </div>
    </div>
    
    <section id="main_section">
      <div class="row">
        <div class="col-md-9" id="main">
          <div id="contentArea">

          </div>
          <div id="postArea" class="d-none">
            <div class="row">
              <div class="col-2">
                &nbsp;
              </div>
              <div class="col-8">
                <form class="row g-3" id="contentsDirectCreateForm" onsubmit="return contentsDirectCreate_createContents()">
                  <h3 id="contentsDirectCreateTitle"></h3>
                  <p id="contentsDirectCreateDescription"></p>
                  <hr>
                  <div class="row">
                    <div class="col-12 mb-3">
                      <label for="contentsDirectCreateContentTitle" class="form-label">{{ __ 'page.contents.thread.contents.create.contentTitle' }}*</label>
                      <input type="text" class="form-control" id="contentsDirectCreateContentTitle" required>
                    </div>
                    <ul class="nav nav-tabs" id="contentsDirectCreateViewTab" role="tablist">
                      <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="contentsDirectCreateViewTab-source" data-bs-toggle="tab" data-bs-target="#contentsDirectCreateViewTab-source-pane" type="button" role="tab" aria-controls="contentsDirectCreateViewTab-source-pane" aria-selected="true">{{ __ 'page.contents.thread.contents.create.source' }}</button>
                      </li>
                      <li class="nav-item" role="presentation">
                        <button class="nav-link" id="contentsDirectCreateViewTab-preview" data-bs-toggle="tab" data-bs-target="#contentsDirectCreateViewTab-preview-pane" type="button" role="tab" aria-controls="contentsDirectCreateViewTab-preview-pane" aria-selected="false" onclick="contentsDirectCreateModal_previewContent()">{{ __ 'page.contents.thread.contents.create.preview' }}</button>
                      </li>
                    </ul>
                    <div class="tab-content" id="contentsDirectCreateViewTabContent">
                      <div class="tab-pane fade show active" id="contentsDirectCreateViewTab-source-pane" role="tabpanel" aria-labelledby="contentsDirectCreateViewTab-source" tabindex="0">
                        <label for="contentsDirectCreateContent" class="form-label">{{ __ 'page.contents.thread.contents.create.content' }}*</label>
                        <textarea class="form-control" id="contentsDirectCreateContent" rows="6" required></textarea>
                      </div>
                      <div class="tab-pane fade" id="contentsDirectCreateViewTab-preview-pane" role="tabpanel" aria-labelledby="contentsDirectCreateViewTab-preview" tabindex="0">
                        <label for="contentsDirectCreateContentPreview" class="form-label">{{ __ 'page.contents.thread.contents.create.contentPreview' }}</label>
                        <div id="contentsDirectCreateContentPreview" class="border p-2 contents-preview"></div>
                      </div>
                    </div>
                  </div>
                  <div class="text-end">{{ __ 'page.contents.thread.contents.create.EssDesc' }}</div>
                  <div>
                    <button type="submit" class="btn btn-primary" id="contentsDirectCreateSubmit">
                      <span id="contentsDirectDoCreateText">{{ __ 'page.contents.thread.contents.create.doCreate' }}</span>
                      <span id="contentsDirectDoCreateSpinner" class="d-none">
                        <span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span>
                        {{ __ 'page.contents.thread.contents.create.creating' }}
                      </span>
                    </button>
                  </div>
                </form>
              </div>
              <div class="col-2">
                &nbsp;
              </div>
            </div>
<script>
  function contentsDirectCreate_setTarget(contentsId, title) {
    contentsDirectCreateTargetContentsId = contentsId;
    document.getElementById('postArea').classList.remove('d-none');

    document.getElementById('contentsDirectCreateTitle').innerText = format_string('{{ __ "page.contents.thread.contents.create.title" }}', escape_html(title));
    document.getElementById('contentsDirectCreateDescription').innerText = format_string('{{ __ "page.contents.thread.contents.create.description" }}', escape_html(title));
    document.getElementById('contentsDirectCreateContentTitle').value = '';
    document.getElementById('contentsDirectCreateContent').value = '';
    document.getElementById('contentsDirectCreateContentPreview').innerText = '{{ __ "page.contents.thread.contents.create.previewEmpty" }}';
    // タブをソースに
    const tabTrigger = new bootstrap.Tab(document.querySelector('#contentsDirectCreateViewTab button[id="contentsDirectCreateViewTab-source"]'));
    tabTrigger.show();
  }
  let contentsDirectCreateTargetContentsId = null;
  function contentsDirectCreate_createContents() {
    if (!contentsDirectCreateTargetContentsId){
      alert('{{ __ "page.contents.thread.contents.create.noTargetError" }}');
      return false;
    }
    // 入力チェック
    const contentTitle = document.getElementById('contentsDirectCreateContentTitle').value;
    const content = document.getElementById('contentsDirectCreateContent').value;
    $("#contentsDirectCreateSubmit").prop("disabled", true);
    $("#contentsDirectDoCreateText").addClass("d-none");
    $("#contentsDirectDoCreateSpinner").removeClass("d-none");
    $.ajax({
      type: 'POST',
      url: '{{ baseUrl }}/api/contents/contentsCreate',
      data: {
        targetContentsId: contentsDirectCreateTargetContentsId,
        contentTitle: contentTitle,
        content: content,
        parser: 'default',
        mode: 'list',
        _csrf: '{{_csrf}}'
      },
      dataType: 'json',
      success: function(data) {
        if (data && !data.error) {
          // 作成成功
          // reload
          location.reload();          
        }else{
          // TODO: スレッド作成失敗時の処理
          alert('{{ __ "page.contents.thread.contents.create.createError" }}');
        }
      },
      error: function() {
        // TODO: エラーハンドリング
        alert('{{ __ "page.contents.thread.modal.create.createError" }}');
      },
      complete: function() {
        $("#contentsDirectCreateSubmit").prop("disabled", false);
        $("#contentsDirectDoCreateText").removeClass("d-none");
        $("#contentsDirectDoCreateSpinner").addClass("d-none");
      }
    });
    return false; // フォーム送信をキャンセル
  }
  function contentsDirectCreate_previewContent() {
    const content = document.getElementById('contentsDirectCreateContent').value;
    if (content.trim().length === 0) {
      $('#contentsDirectCreateContentPreview').text('{{ __ "page.contents.thread.contents.create.previewEmpty" }}');
      return;
    }
    $('#contentsDirectCreateContentPreview').text('{{ __ "page.contents.thread.contents.create.previewLoading" }}');
    $.ajax({
      type: 'POST',
      url: '{{ baseUrl }}/api/contents/parse',
      data: {
        content: content,
        parser: 'default',
        _csrf: '{{_csrf}}'
      },
      dataType: 'json',
      success: function(data) {
        if (data && data.contentsparsed) {
          $('#contentsDirectCreateContentPreview').html(data.contentsparsed);
          // highlight.js
          document.querySelectorAll('#contentsDirectCreateContentPreview pre code').forEach((block) => {
            hljs.highlightElement(block);
          });
        } else {
          $('#contentsDirectCreateContentPreview').text('{{ __ "page.contents.thread.contents.create.previewError" }}');
        }
      },
      error: function() {
        $('#contentsDirectCreateContentPreview').text('{{ __ "page.contents.thread.contents.create.previewError" }}');
      }
    });
  }
</script>
          </div>
        </div>
        <div class="col-md-3 d-none d-md-block" id="mainNavi">Navi</div>
      </div>
    </section>
  </div> <!-- row -->
</div>

{{> footer }}
