{{> header }}
{{> topNavigator }}

<script>
  function escape_html (string) {
    if(typeof string !== 'string') {
      return string;
    }
    return string.replace(/[&'`"<>]/g, function(match) {
      return {
        '&': '&amp;',
        "'": '&#x27;',
        '`': '&#x60;',
        '"': '&quot;',
        '<': '&lt;',
        '>': '&gt;',
      }[match]
    });
  }
  function generateUserTooltip(user){
    const email = user.email ? escape_html(user.email) + '<br>' : '';
    const description = user.description ? escape_html(user.description) : '';
    return `
        ${escape_html(user.display_name)}<br>
        created: ${escape_html(user.created_at_str)}<br>
        ${email}
        ${description}
    `;
  }
  function generateContentOnce(data) {
      const breadcrumb = [];
      for(let i=0;i<data.contents.dir_ids.length;i++){
        const dirId = data.contents.dir_ids[i];
        const dirName = data.contents.dir_names[i];
        const item = $("<li>").addClass("breadcrumb-item active").html(
          `${escape_html(dirName)}`
        );
        breadcrumb.push(item);
      }
      const item = $("<li>").addClass("breadcrumb-item active").html(
        `{{ __ "page.contents.breadcrumb.dashboard" }}`
      );
      breadcrumb.unshift(item);
      const tags = [];
      for (let i=0;i<data.contents.tag_ids.length;i++){
        const tagId = data.contents.tag_ids[i];
        const tagName = data.contents.tag_names[i];
        const tagItem = $("<span>").addClass("badge text-bg-light").attr('data-tag-id', tagId).text(tagName);
        tags.push(tagItem);
      }
      const contents = $('<div>').html(data.contents.contents);
      const contentsSample = contents.text().substring(0, 200);
      return `
          <div class="container border rounded shadow">
            <div class="row">
              <div class="col-9 dfs-7">
                <nav aria-label="breadcrumb">
                  <ol class="breadcrumb">
                    ${breadcrumb.map(item => item.prop('outerHTML')).join('')}
                  </ol>
                </nav>
              </div>
              <div class="col-3 dfs-7 text-end">
                <div class="d-inline">
                  ${tags.map(item => item.prop('outerHTML')).join('')}
                </div>
              </div>
            </div>
            <div class="row">
              <div class="col-1">
                &nbsp;
              </div>
              <div class="col-9">
                <h5><a class="contentsTitle" href="{{ baseUrl }}/contents/${data.id}">${escape_html(data.title)}</a></h5>
              </div>
              <div class="col-2 text-end">
                <a class="userLink"
                  href="{{ baseUrl }}/users/${data.contents.created_user.id}"
                  data-bs-toggle="tooltip" data-bs-html="true"
                  data-bs-title="${generateUserTooltip(data.contents.created_user)}"
                  ><span class="dfs-7">${escape_html(data.contents.created_user.display_name)}</span></a><br>
              </div>
            </div>
            <div class="row">
              <div class="col-1">
                &nbsp;
              </div>
              <div class="col-11">
                <p>${contentsSample}</p>
              </div>
            </div>
            <div class="row">
              <div class="col text-end">
                <p><span class="dfs-8">${escape_html(data.contents.updated_at_str)}</span></p>
              </div>
            </div>
          </div>
    `;
  }
  let contentsCount = 0;
  let contentsPage = 0;
  let contentsCountPerPage = 10;
  function updatePagination() {
    if (contentsCount > 0){
      if (contentsPage < 1) {
        $('#prevPage').addClass('disabled');
      } else {
        $('#prevPage').removeClass('disabled');
      }
      for(let i=0; i < Math.ceil(contentsCount / contentsCountPerPage); i++) {
        $(`#page-${i}`).removeClass('active');
      }
      $(`#page-${contentsPage}`).addClass('active');
      if (contentsPage >= Math.ceil(contentsCount / contentsCountPerPage) - 1) {
        $('#nextPage').addClass('disabled');
      } else {
        $('#nextPage').removeClass('disabled');
      }
    }
  }
  function changePagination(pageNo) {
    if (pageNo < 1 || pageNo > Math.ceil(contentsCount / contentsCountPerPage)) {
      // DO NOTHING
    }else{
      contentsPage = pageNo - 1;
    }
    updatePagination();
    loadContents();
  }
  function prevPagination() {
    if (contentsPage > 0) {
      contentsPage--;
      updatePagination();
      loadContents();
    }
  }
  function nextPagination() {
    if (contentsPage < Math.ceil(contentsCount / contentsCountPerPage) - 1) {
      contentsPage++;
      updatePagination();
      loadContents();
    }
  }
  function loadPagination(){
    const urlParams = new URLSearchParams(window.location.search);
    const treeId = urlParams.get('treeId');
    const tagsId = urlParams.get('tagsId');
    let tags = null;
    if (tagsId) tags = tagsId.split('+').map(id => decodeURIComponent(id));
    $('#pagination').empty();
    $.ajax({
      url: "{{baseUrl}}/api/contents/indexCount",
      data: {
        node: treeId,
        tags: tagsId
      },
      success: function(data) {
        // 成功時の処理
        $('#pagination').empty();
        contentsCount = data.count;
        if (contentsCount > 0){
          $('#pagination').append(`<li class="page-item" id="prevPage"><a class="page-link" href="#" onclick="prevPagination()">{{ __ 'page.contents.pagination.previous' }}</a></li>`);
          for (let i = 0; i < Math.ceil(contentsCount / contentsCountPerPage); i++) {
            $('#pagination').append(`<li class="page-item" id="page-${i}"><a class="page-link" href="#" data-page="${i}" onclick="changePagination(${i + 1})">${i + 1}</a></li>`);
          }
          $('#pagination').append(`<li class="page-item" id="nextPage"><a class="page-link" href="#" onclick="nextPagination()">{{ __ 'page.contents.pagination.next' }}</a></li>`);
        }
        changePagination(1);
      },
      error: function(xhr, status, error) {
        // エラー時の処理
        $('#pagination').text("{{ __ 'page.contents.index.loadError'}}");
      }
    });
  }
  function loadContents(){
    const urlParams = new URLSearchParams(window.location.search);
    const treeId = urlParams.get('treeId');
    const tagsId = urlParams.get('tagsId');
    let tags = null;
    if (tagsId) tags = tagsId.split('+').map(id => decodeURIComponent(id));
    $('#contentArea').text("{{ __ 'page.contents.index.loading'}}");
    $.ajax({
      url: "{{baseUrl}}/api/contents/index",
      data: {
        node: treeId,
        tags: tagsId,
        start: contentsPage * contentsCountPerPage,
        len: contentsCountPerPage,
      },
      success: function(data) {
        // 成功時の処理
        $('#contentArea').empty();
        if (data.length === 0) {
          $('#contentArea').text("{{ __ 'page.contents.index.noContents'}}");
        }else{
          for (const item of data) {
            const contentHtml = generateContentOnce(item);
            $('#contentArea').append(contentHtml);
            $('#contentArea').append('<br>');
          }
          const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
          const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))
        }
      },
      error: function(xhr, status, error) {
        // エラー時の処理
        $('#contentArea').text("{{ __ 'page.contents.index.loadError'}}");
      }
    });
  }

  function replaceUrl(){
    const treeString = $('#treeKeyword').val();
    const treeid = $('#tree').tree('getSelectedNode') ? $('#tree').tree('getSelectedNode').id : '';
    const tagsids = [];//Object.keys(localStorage.getItem('contents-tag-dashboard') ? JSON.parse(localStorage.getItem('contents-tag-dashboard')) : {});
    for(const tag of $("#tags span[data-tag-id]")) {
      tagsids.push(tag.getAttribute('data-tag-id'));
    }
    const tagsid = tagsids.map(id => encodeURIComponent(id)).join('+');
    if (treeString === '' && treeid === '' && tagsid === '') {
      history.pushState(null, null, "{{baseUrl}}/contents");
    } else {
      history.pushState(null, null, 
        "?treeKeyword=" + encodeURIComponent(treeString)
         + "&treeId=" + encodeURIComponent(treeid)
         + "&tagsId=" + encodeURIComponent(tagsid));
    }
    loadPagination();
  }
  async function openFullNode(node) {
    if (node && node.name !== '') {
      if (node.parent) {
        await openFullNode(node.parent);
      }
      if (node.is_open){
        $('#tree').tree('closeNode', node, false);
      }
      if (!node.is_open) {
         $('#tree').tree('openNode', node, false);
      }
    }
  }
  async function loadFromUrl(){
    const urlParams = new URLSearchParams(window.location.search);
    const treeKeyword = urlParams.get('treeKeyword');
    const treeId = urlParams.get('treeId');
    const tagsId = urlParams.get('tagsId');

    if (treeKeyword) {
      $('#treeKeyword').val(treeKeyword);
    }
    if (treeId) {
      const node = $('#tree').tree('getNodeById', treeId);
      if (node){
        await openFullNode(node);
        //await new Promise(r => setTimeout(() => r(), 200)); // wait for tree to open
        const selected = $('#tree').tree('getSelectedNode');
        //if (selected) {
        //  $('#tree').tree('selectNode',selected,false);
        //}
        if (node && selected.id !== node.id) {
          $('#tree').tree('selectNode', node, false);
        }
        //console.log("Node opened:", node);
        $('#tree').tree('refresh');
      }
    }
    if (tagsId) {
      const tags = tagsId.split('+').map(id => decodeURIComponent(id));
      for (const tag of tags) {
        addTag(tagData[tag]);
      }
    }
    loadTagCloud(false);
    loadPagination();
  }
  function getAllNodes(data) {
    const ret = [];
    for(const dat of data) {
      if (dat.children && dat.children.length > 0) {
        ret.push(...getAllNodes(dat.children));
      }
      ret.push(dat.id);
    }
    return ret;
  }
  function searchTree() {
    const keyword = document.getElementById("treeKeyword").value;
    if (keyword === '') {
      $('#tree').tree('loadDataFromUrl', "{{baseUrl}}/api/contents/tree");
      $('#currentTreeKeywordText').text('');
      $('#currentTreeKeyword').addClass('d-none');
      replaceUrl();
    } else {
      $('#tree').tree('loadDataFromUrl', "{{baseUrl}}/api/contents/tree?keyword=" + encodeURIComponent(keyword),null, ()=>{
        const data = $('#tree').tree('getTree').getData(true);
        for(const nodeid of getAllNodes(data)){
          if (nodeid){
            $('#tree').tree('openNode', $('#tree').tree('getNodeById', nodeid), false);
          }
        }
        $('#currentTreeKeywordText').text(keyword);
        $('#currentTreeKeyword').removeClass('d-none');
        replaceUrl();
      });
    }
  }

  var tagData = {};
  var tagCloudObject = null;
  var selectedTags = {}; //localStorage.getItem('contents-tag-dashboard') ? JSON.parse(localStorage.getItem('contents-tag-dashboard')) : {};
  function clickTag(tagId){
    delete selectedTags[tagId];
    //localStorage.setItem('contents-tag-dashboard', JSON.stringify(selectedTags));
    $(`#tags span[data-tag-id="${tagId}"]`).remove();
    replaceUrl();
  }
  function addTag(tag){
    if (!tag || !tag.id || !tag.name) {
      return;
    }
    $("#tags").append(
      `<span class="badge text-bg-light" data-tag-id="${tag.id}" onclick="clickTag('${tag.id}')">${tag.name}</span> `
    );
  }
  function clickTagCloud(e){
    if (e.target.className === 'tagcloud--item') {
      const tagId = e.target.getAttribute('data-tag-id');
      if (selectedTags[tagId]) {
        // remove
        delete selectedTags[tagId];
        $(`#tags span[data-tag-id="${tagId}"]`).remove();
      } else {
        // add
        const tag = tagData[tagId];
        addTag(tag);
        selectedTags[tagId] = tag;
      }
      //localStorage.setItem('contents-tag-dashboard', JSON.stringify(selectedTags));
      replaceUrl();
    }
  }
  let lastTreeId = null;
  function loadTagCloud(startup){
    const selected = $('#tree').tree('getSelectedNode');
    const selectedId = selected ? selected.id : '';
    $.ajax({
      url: "{{baseUrl}}/api/contents/tagcloud?treeId=" + encodeURIComponent(selectedId),
      method: "GET",
      success: async (data) => {
        if (tagCloudObject){
          $("#tagcloud").empty();
          tagCloudObject = null;
        }
        if (lastTreeId !== null && lastTreeId !== selectedId) {
          $(`#tags span`).remove();
          selectedTags = {};
          //localStorage.setItem('contents-tag-dashboard', JSON.stringify(selectedTags));
        }
        lastTreeId = selectedId;
        tagData = {};
        if (data.length === 0) {
          $("#tagcloud").addClass("d-none");
          $("#noTags").removeClass("d-none");
        } else {
          $("#tagcloud").removeClass("d-none");
          $("#noTags").addClass("d-none");
          let tagSizeMax = 1;
          let tagSizeMin = 1;
          for (const tag of data) {
            if (tag.count > tagSizeMax) {
              tagSizeMax = tag.count;
            }
            if (tag.count < tagSizeMin) {
              tagSizeMin = tag.count;
            }
          }
          var tagSize = function(count){
            return Math.ceil((count-tagSizeMin) / (tagSizeMax-tagSizeMin+1) * 20) + 12;
          }
          const items = [];
          for (const tag of data) {
            const tagItem = $("<span>").addClass("tagcloud--item").attr('data-tag-id', tag.tag_id).text(tag.display_name);
            tagItem.css("font-size", tagSize(tag.count) + "px");
            items.push(tagItem[0].outerHTML);
            tagData[tag.tag_id] = {
              id: tag.tag_id,
              name: tag.display_name,
              count: tag.count
            };
            if (selectedTags[tag.tag_id]) {
              addTag(tagData[tag.tag_id]);
            }
          }
          tagCloudObject = TagCloud('#tagcloud', items, {
            radius: 50,
            maxSpeed: 'normal',
            initSpeed: 'normal',
            direction: 135,
            keep: true,
            useContainerInlineStyles: true,
            useItemInlineStyles: true,
            containerClass: 'tagcloud',
            itemClass: 'tagcloud--item',
            useHTML: true
          });
        }
        if (startup){
          await loadFromUrl();
          makeBreadcrumb();
        }else{
          makeBreadcrumb();
          replaceUrl();
        }
      }
    });
  }
  function makeBreadcrumb(){
    const breadcrumbList = $("#breadcrumbList");
    breadcrumbList.empty();
    let selectedNode = $('#tree').tree('getSelectedNode');
    const ary = [];
    if (selectedNode) {
      do{
        const item = $("<li>").addClass("breadcrumb-item").html(
          `<a href="#" onclick="$('#tree').tree('selectNode', $('#tree').tree('getNodeById', '${selectedNode.id}'));">${selectedNode.name}</a>`
        );
        ary.unshift(item);
        selectedNode = selectedNode.parent;
      }while(selectedNode.parent);
      const item = $("<li>").addClass("breadcrumb-item").html(
        `<a href="#" onclick="$('#tree').tree('selectNode', $('#tree').tree('getSelectedNode'));">{{ __ "page.contents.breadcrumb.dashboard" }}</a>`
      );
      ary.unshift(item);
      ary[ary.length - 1].addClass("active");
      ary[ary.length - 1].text(ary[ary.length - 1].text());
    }else{
      const item = $("<li>").addClass("breadcrumb-item active").text("{{ __ "page.contents.breadcrumb.root" }}");
      ary.push(item);
    }
    breadcrumbList.append(ary);
  }

  addEventListener("load", (event) => {
    const icon1 = document.createElement("i");
    icon1.classList.add("material-icons");
    icon1.textContent = "chevron_right";
    const icon2 = document.createElement("i");
    icon2.classList.add("material-icons");
    icon2.textContent = "expand_more";
    $('#tree').tree({
      closedIcon: icon1,
      openedIcon: icon2,
      saveState: 'contents-tree-dashboard',
      showEmptyFolder: true
    }); 
    $("#tree").on(
      'tree.select',
      function(event) {
        loadTagCloud(false);
      }
    );
    $("#tree").on(
      'tree.init',
      function() {
        loadTagCloud(true);
      }
    );
    $("#tagcloud")[0].addEventListener("click", clickTagCloud);

    $("#tree").tree("loadDataFromUrl","{{baseUrl}}/api/contents/tree");
  });
</script>

<div class="container-fluid">
  <div class="row">
    <div class="col-md-2 leftmenu">
      <div class="row">
        <div class="col align-items-center">
          <div id="tagcloud" class="tagcloud"></div> 
          <div id="noTags" class="d-none">{{ __ "page.contents.tagCloud.noTags" }}</div>
        </div>
      </div>
      <div id="treeviewArea">
        <div class="input-group">
          <input type="text" id="treeKeyword" class="form-control form-control-sm" placeholder="{{ __ 'page.contents.tree.search' }}" aria-label="Search" aria-describedby="button-addon2" onkeyup="if($('#treeKeyword').val() === '' || event.key === 'Enter'){ searchTree(); }">
          <button class="btn btn-outline-secondary btn-sm" type="button" onclick="searchTree()">{{ __ 'page.contents.tree.searchButton' }}</button>
        </div>
        <div id="currentTreeKeyword" class="d-none">
          <span class="">{{ __ 'page.contents.tree.searchWord' }}</span>:<span id="currentTreeKeywordText"></span>
        </div>
        <div id="tree" data-url="{{baseUrl}}/api/contents/tree"></div>
      </div>
    </div>
    <div class="col-md-10">
      {{#if false}}
      <nav style="--bs-breadcrumb-divider: url(&#34;data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8'%3E%3Cpath d='M2.5 0L1 1.5 3.5 4 1 6.5 2.5 8l4-4-4-4z' fill='%236c757d'/%3E%3C/svg%3E&#34;);" aria-label="breadcrumb">
        <ol class="breadcrumb">
          <li class="breadcrumb-item active"><a href="{{baseUrl}}/contents">Dashboard</a></li>
        </ol>
      </nav>
      {{/if}}
      <div class="row">
        <nav id="breadcrumb" aria-label="breadcrumb">
          <ol id="breadcrumbList" class="breadcrumb">
          </ol>
        </nav>
      </div>
      <div class="row text-end">
          <div id="tags"></div>
      </div>
      <section id="main_section">
        <div id="contentArea">
          <!-- Content will be loaded here -->
          {{ __ 'page.contents.index.contentArea'}}
        </div>
      </section>
      <nav aria-label="pagination">
        <ul class="pagination justify-content-center" id="pagination">
        </ul>
      </nav>
    </div>
  </div> <!-- row -->
</div>

{{> footer }}
