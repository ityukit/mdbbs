{{> header }}
{{> topNavigator }}

<script>
  function escape_html (string) {
    if(typeof string !== 'string') {
      return string;
    }
    return string.replace(/[&'`"<>]/g, function(match) {
      return {
        '&': '&amp;',
        "'": '&#x27;',
        '`': '&#x60;',
        '"': '&quot;',
        '<': '&lt;',
        '>': '&gt;',
      }[match]
    });
  }
  function generateUserTooltip(user){
    const email = user.email ? escape_html(user.email) + '<br>' : '';
    const description = user.description ? escape_html(user.description) : '';
    return `
        ${escape_html(user.display_name)}<br>
        created: ${escape_html(user.created_at_str)}<br>
        ${email}
        ${description}
    `;
  }
  function threadMoveStart(id){
    $('#threadMove').modal('show');
  }

  function generateContentOnce(data) {
      const breadcrumb = [];
      for(let i=0;i<data.contents.dir_ids.length;i++){
        const dirId = data.contents.dir_ids[i];
        const dirName = data.contents.dir_names[i];
        const item = $("<li>").addClass("breadcrumb-item active").html(
          `${escape_html(dirName)}`
        );
        breadcrumb.push(item);
      }
      // root not set
      const item = $("<li>").addClass("breadcrumb-item active").html(
      //  `{{ __ "page.contents.breadcrumb.dashboard" }}`
      ''
      );
      breadcrumb.unshift(item);
      const tags = [];
      for (let i=0;i<data.contents.tag_ids.length;i++){
        const tagId = data.contents.tag_ids[i];
        const tagName = data.contents.tag_names[i];
        const tagItem = $("<span>").addClass("badge text-bg-light").attr('data-tag-id', tagId).text(tagName);
        tags.push(tagItem);
      }
      const contents = $('<div>').html(data.contents.contents);
      const contentsSample = contents.text().substring(0, 200);
      return `
          <div class="container border rounded shadow">
            <div class="row">
              <div class="col-9 contents-index-thread-header">
                <div class="dropdown contents-index-thread-navbar-nav">
                  <button class="btn dropdown-toggle contents-index-thread-navbar-button" data-bs-toggle="dropdown" aria-expanded="false">
                    <span class="material-icons">menu</span>
                  </button>
                  <ul class="dropdown-menu">
                    <li><a class="dropdown-item" onclick="threadMoveStart('${data.id}')">{{ __ "page.contents.thread.menu.move" }}</a></li>
                    <li><a class="dropdown-item" onclick="threadRenameStart('${data.id}')">{{ __ "page.contents.thread.menu.rename" }}</a></li>
                    <li><a class="dropdown-item" onclick="threadDeleteStart('${data.id}')">{{ __ "page.contents.thread.menu.delete" }}</a></li>
                  </ul>
                </div>
                &nbsp;
                <nav aria-label="breadcrumb">
                  <ol class="breadcrumb">
                    ${breadcrumb.map(item => item.prop('outerHTML')).join('')}
                  </ol>
                </nav>
              </div>
              <div class="col-3 text-end">
                <div class="d-inline">
                  ${tags.map(item => item.prop('outerHTML')).join('')}
                </div>
              </div>
            </div>
            <div class="row">
              <div class="col-1">
                &nbsp;
              </div>
              <div class="col-9">
                <h5><a class="contentsTitle" href="{{ baseUrl }}/contents/${data.id}">${escape_html(data.title)}</a></h5>
              </div>
              <div class="col-2 text-end">
                <a class="userLink"
                  href="{{ baseUrl }}/users/${data.contents.created_user.id}"
                  data-bs-toggle="tooltip" data-bs-html="true"
                  data-bs-title="${generateUserTooltip(data.contents.created_user)}"
                  ><span class="dfs-7">${escape_html(data.contents.created_user.display_name)}</span></a><br>
              </div>
            </div>
            <div class="row">
              <div class="col-1">
                &nbsp;
              </div>
              <div class="col-11">
                <p>${contentsSample}</p>
              </div>
            </div>
            <div class="row">
              <div class="col text-end">
                <p><span class="dfs-8">${escape_html(data.contents.updated_at_str)}</span></p>
              </div>
            </div>
          </div>
    `;
  }
  let contentsCount = 0;
  let contentsPage = 0;
  let contentsCountPerPage = 10;
  function updatePagination() {
    if (contentsCount > 0){
      if (contentsPage < 1) {
        $('#prevPage').addClass('disabled');
      } else {
        $('#prevPage').removeClass('disabled');
      }
      for(let i=0; i < Math.ceil(contentsCount / contentsCountPerPage); i++) {
        $(`#page-${i}`).removeClass('active');
      }
      $(`#page-${contentsPage}`).addClass('active');
      if (contentsPage >= Math.ceil(contentsCount / contentsCountPerPage) - 1) {
        $('#nextPage').addClass('disabled');
      } else {
        $('#nextPage').removeClass('disabled');
      }
    }
    const urlParams = new URLSearchParams(window.location.search);
    let s = '';
    for(const [key,val] of urlParams.entries()){
      if(key !== 'page'){
        s += '&' + encodeURIComponent(key) + '=' + encodeURIComponent(val);
      }
    }
    if (contentsPage > 0){
      s += '&page=' + encodeURIComponent(contentsPage);
    }
    if (s.length > 0){
      s = '?' + s.substring(1);
      history.pushState(null, null, s);
    }
  }
  function changePagination(pageNo) {
    if (pageNo < 1 || pageNo > Math.ceil(contentsCount / contentsCountPerPage)) {
      contentsPage = 0;
    }else{
      contentsPage = pageNo - 1;
    }
    updatePagination();
    loadContents();
  }
  function prevPagination() {
    if (contentsPage > 0) {
      contentsPage--;
      updatePagination();
      loadContents();
    }
  }
  function nextPagination() {
    if (contentsPage < Math.ceil(contentsCount / contentsCountPerPage) - 1) {
      contentsPage++;
      updatePagination();
      loadContents();
    }
  }
  function loadPagination(){
    const urlParams = new URLSearchParams(window.location.search);
    let treeId = urlParams.get('treeId');
    const tagsId = urlParams.get('tagsId');
    let tags = null;
    if (tagsId) tags = tagsId.split('+').map(id => decodeURIComponent(id));
    const keyword = document.getElementById("treeKeyword").value;
    $('#pagination').empty();
    $.ajax({
      url: "{{baseUrl}}/api/contents/indexCount",
      data: {
        node: treeId,
        tags: tagsId,
        nodeWord: keyword,
        subTree: $('#treeShowSubItems').is(':checked') ? '1' : '0',
      },
      success: function(data) {
        // 成功時の処理
        $('#pagination').empty();
        contentsCount = data.count;
        if (contentsCount > 0){
          $('#pagination').append(`<li class="page-item" id="prevPage"><a class="page-link" href="#" onclick="prevPagination()">{{ __ 'page.contents.pagination.previous' }}</a></li>`);
          for (let i = 0; i < Math.ceil(contentsCount / contentsCountPerPage); i++) {
            $('#pagination').append(`<li class="page-item" id="page-${i}"><a class="page-link" href="#" data-page="${i}" onclick="changePagination(${i + 1})">${i + 1}</a></li>`);
          }
          $('#pagination').append(`<li class="page-item" id="nextPage"><a class="page-link" href="#" onclick="nextPagination()">{{ __ 'page.contents.pagination.next' }}</a></li>`);
        }
        updatePagination();
        loadContents();
      },
      error: function(xhr, status, error) {
        // エラー時の処理
        $('#pagination').text("{{ __ 'page.contents.index.loadError'}}");
      }
    });
  }
  function loadContents(){
    const urlParams = new URLSearchParams(window.location.search);
    let treeId = urlParams.get('treeId');
    const tagsId = urlParams.get('tagsId');
    let tags = null;
    if (tagsId) tags = tagsId.split('+').map(id => decodeURIComponent(id));
    const keyword = document.getElementById("treeKeyword").value;
    $('#contentArea').text("{{ __ 'page.contents.index.loading'}}");
    $.ajax({
      url: "{{baseUrl}}/api/contents/index",
      data: {
        node: treeId,
        tags: tagsId,
        nodeWord: keyword,
        subTree: $('#treeShowSubItems').is(':checked') ? '1' : '0',
        start: contentsPage * contentsCountPerPage,
        len: contentsCountPerPage,
      },
      success: function(data) {
        // 成功時の処理
        $('#contentArea').empty();
        if (data.length === 0) {
          $('#contentArea').text("{{ __ 'page.contents.index.noContents'}}");
        }else{
          for (const item of data) {
            const contentHtml = generateContentOnce(item);
            $('#contentArea').append(contentHtml);
            $('#contentArea').append('<br>');
          }
          const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
          const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))
        }
      },
      error: function(xhr, status, error) {
        // エラー時の処理
        $('#contentArea').text("{{ __ 'page.contents.index.loadError'}}");
      }
    });
  }

  function replaceUrl(){
    const treeString = $('#treeKeyword').val();
    const treeid = $('#tree').tree('getSelectedNode') ? $('#tree').tree('getSelectedNode').id : '';
    const tagsids = [];//Object.keys(localStorage.getItem('contents-tag-dashboard') ? JSON.parse(localStorage.getItem('contents-tag-dashboard')) : {});
    for(const tag of $("#tags span[data-tag-id]")) {
      tagsids.push(tag.getAttribute('data-tag-id'));
    }
    const tagsid = tagsids.map(id => encodeURIComponent(id)).join('+');
    const showSubItems = $('#treeShowSubItems').is(':checked');
    const items = [];
    if (treeString !== '') {
      items.push("treeKeyword=" + encodeURIComponent(treeString));
    }
    if (treeid !== '') {
      items.push("treeId=" + encodeURIComponent(treeid));
    }
    if (tagsid !== '') {
      items.push("tagsId=" + encodeURIComponent(tagsid));
    }
    if (showSubItems) {
      items.push("showSubItems=1");
    }
    if (contentsPage > 0) {
      items.push("page=" + encodeURIComponent(contentsPage));
    }
    if (showSubItems && contentsCountPerPage !== 50) {
      items.push("countPerPage=" + encodeURIComponent(contentsCountPerPage));
    }else if (!showSubItems && contentsCountPerPage !== 10) {
      items.push("countPerPage=" + encodeURIComponent(contentsCountPerPage));
    }
    if (items.length === 0) {
      history.pushState(null, null, "{{baseUrl}}/contents");
    } else {
      history.pushState(null, null, "?" + items.join('&'));
    }
    loadPagination();
  }
  async function openFullNode(node) {
    if (node && node.name !== '') {
      if (node.parent) {
        await openFullNode(node.parent);
      }
      if (node.is_open){
        $('#tree').tree('closeNode', node, false);
      }
      if (!node.is_open) {
         $('#tree').tree('openNode', node, false);
      }
    }
  }
  async function loadFromUrl(){
    const urlParams = new URLSearchParams(window.location.search);
    const treeKeyword = urlParams.get('treeKeyword');
    const treeId = urlParams.get('treeId');
    const tagsId = urlParams.get('tagsId');
    const showSubItems = urlParams.get('showSubItems') === '1';
    const page = urlParams.get('page');
    const pageCount = urlParams.get('countPerPage');

    if (treeKeyword) {
      $('#treeKeyword').val(treeKeyword);
    }
    if (treeId) {
      const node = $('#tree').tree('getNodeById', treeId);
      if (node){
        await openFullNode(node);
        //await new Promise(r => setTimeout(() => r(), 200)); // wait for tree to open
        const selected = $('#tree').tree('getSelectedNode');
        //if (selected) {
        //  $('#tree').tree('selectNode',selected,false);
        //}
        if (node && selected.id !== node.id) {
          $('#tree').tree('selectNode', node, false);
        }
        //console.log("Node opened:", node);
        $('#tree').tree('refresh');
      }
    }
    if (tagsId) {
      const tags = tagsId.split('+').map(id => decodeURIComponent(id));
      for (const tag of tags) {
        addTag(tagData[tag]);
      }
    }
    if (page){
      contentsPage = parseInt(page, 10);
    }
    if (showSubItems){
      $('#treeShowSubItems').prop('checked', true);
      contentsCountPerPage = 50;
    }else{
      $('#treeShowSubItems').prop('checked', false);
      contentsCountPerPage = 10;
    }
    if (pageCount){
      const pc = parseInt(pageCount, 10);
      if (pc > 0 && pc <= 100) {
        contentsCountPerPage = pc;
      }
    }
    loadTagCloud(false);
    loadPagination();
  }
  function getAllNodes(data) {
    const ret = [];
    for(const dat of data) {
      if (dat.children && dat.children.length > 0) {
        ret.push(...getAllNodes(dat.children));
      }
      ret.push(dat.id);
    }
    return ret;
  }
  function searchTree() {
    const keyword = document.getElementById("treeKeyword").value;
    if (keyword === '') {
      $('#tree').tree('loadDataFromUrl', "{{baseUrl}}/api/contents/tree");
      $('#currentTreeKeywordText').text('');
      $('#currentTreeKeyword').addClass('d-none');
      const node = $('#tree').tree('getSelectedNode');
      if (node) $('#tree').tree('selectNode', node , false);
      contentsPage = 0;
      loadTagCloud(false);
      loadContents();
      makeBreadcrumb();
      replaceUrl();
    } else {
      $('#tree').tree('loadDataFromUrl', "{{baseUrl}}/api/contents/tree?keyword=" + encodeURIComponent(keyword),null, ()=>{
        const data = $('#tree').tree('getTree').getData(true);
        for(const nodeid of getAllNodes(data)){
          if (nodeid){
            $('#tree').tree('openNode', $('#tree').tree('getNodeById', nodeid), false);
          }
        }
        $('#currentTreeKeywordText').text(keyword);
        $('#currentTreeKeyword').removeClass('d-none');
        const node = $('#tree').tree('getSelectedNode');
        if (node) $('#tree').tree('selectNode', node , false);
        contentsPage = 0;
        loadTagCloud(false);
        loadContents();
        makeBreadcrumb();
        replaceUrl();
      });
    }
  }

  var tagData = {};
  var tagCloudObject = null;
  var selectedTags = {}; //localStorage.getItem('contents-tag-dashboard') ? JSON.parse(localStorage.getItem('contents-tag-dashboard')) : {};
  function clickTag(tagId){
    delete selectedTags[tagId];
    //localStorage.setItem('contents-tag-dashboard', JSON.stringify(selectedTags));
    $(`#tags span[data-tag-id="${tagId}"]`).remove();
    replaceUrl();
  }
  function addTag(tag){
    if (!tag || !tag.id || !tag.name) {
      return;
    }
    $("#tags").append(
      `<span class="badge text-bg-light" data-tag-id="${tag.id}" onclick="clickTag('${tag.id}')">${tag.name}</span> `
    );
  }
  function clickTagCloud(e){
    if (e.target.className === 'tagcloud--item') {
      const tagId = e.target.getAttribute('data-tag-id');
      if (selectedTags[tagId]) {
        // remove
        delete selectedTags[tagId];
        $(`#tags span[data-tag-id="${tagId}"]`).remove();
      } else {
        // add
        const tag = tagData[tagId];
        addTag(tag);
        selectedTags[tagId] = tag;
      }
      //localStorage.setItem('contents-tag-dashboard', JSON.stringify(selectedTags));
      contentsPage = 0;
      replaceUrl();
    }
  }
  let lastTreeId = null;
  function loadTagCloud(startup){
    const selected = $('#tree').tree('getSelectedNode');
    let selectedId = selected ? selected.id : '';
    const keyword = document.getElementById("treeKeyword").value;
    $.ajax({
      url: "{{baseUrl}}/api/contents/tagcloud?treeId=" + encodeURIComponent(selectedId) + "&nodeWord=" + encodeURIComponent(keyword) + "&subTree=" + ($('#treeShowSubItems').is(':checked') ? '1' : '0'),
      method: "GET",
      success: async (data) => {
        if (tagCloudObject){
          $("#tagcloud").empty();
          tagCloudObject = null;
        }
        if (lastTreeId !== null && lastTreeId !== selectedId) {
          $(`#tags span`).remove();
          selectedTags = {};
          //localStorage.setItem('contents-tag-dashboard', JSON.stringify(selectedTags));
        }
        lastTreeId = selectedId;
        tagData = {};
        if (data.length === 0) {
          $("#tagcloud").addClass("d-none");
          $("#noTags").removeClass("d-none");
        } else {
          $("#tagcloud").removeClass("d-none");
          $("#noTags").addClass("d-none");
          let tagSizeMax = 1;
          let tagSizeMin = 1;
          for (const tag of data) {
            if (tag.count > tagSizeMax) {
              tagSizeMax = tag.count;
            }
            if (tag.count < tagSizeMin) {
              tagSizeMin = tag.count;
            }
          }
          var tagSize = function(count){
            return Math.ceil((count-tagSizeMin) / (tagSizeMax-tagSizeMin+1) * 20) + 12;
          }
          const items = [];
          for (const tag of data) {
            const tagItem = $("<span>").addClass("tagcloud--item").attr('data-tag-id', tag.tag_id).text(tag.display_name);
            tagItem.css("font-size", tagSize(tag.count) + "px");
            items.push(tagItem[0].outerHTML);
            tagData[tag.tag_id] = {
              id: tag.tag_id,
              name: tag.display_name,
              count: tag.count
            };
            if (selectedTags[tag.tag_id]) {
              addTag(tagData[tag.tag_id]);
            }
          }
          tagCloudObject = TagCloud('#tagcloud', items, {
            radius: 50,
            maxSpeed: 'normal',
            initSpeed: 'normal',
            direction: 135,
            keep: true,
            useContainerInlineStyles: true,
            useItemInlineStyles: true,
            containerClass: 'tagcloud',
            itemClass: 'tagcloud--item',
            useHTML: true
          });
        }
        if (startup){
          await loadFromUrl();
          makeBreadcrumb();
        }else{
          makeBreadcrumb();
          replaceUrl();
        }
      }
    });
  }
  function makeBreadcrumb(){
    const breadcrumbList = $("#breadcrumbList");
    breadcrumbList.empty();
    let selectedNode = $('#tree').tree('getSelectedNode');
    const ary = [];
    if (selectedNode) {
      do{
        const item = $("<li>").addClass("breadcrumb-item").html(
          `<a href="#" onclick="$('#tree').tree('selectNode', $('#tree').tree('getNodeById', '${selectedNode.id}'));">${selectedNode.name}</a>`
        );
        ary.unshift(item);
        selectedNode = selectedNode.parent;
      }while(selectedNode.parent);
      const item = $("<li>").addClass("breadcrumb-item").html(
        `<a href="#" onclick="$('#tree').tree('selectNode', $('#tree').tree('getSelectedNode'));">{{ __ "page.contents.breadcrumb.dashboard" }}</a>`
      );
      ary.unshift(item);
      ary[ary.length - 1].addClass("active");
      ary[ary.length - 1].text(ary[ary.length - 1].text());
    }else{
      const keyword = document.getElementById("treeKeyword").value;
      if (false && keyword !== ''){
        const item = $("<li>").addClass("breadcrumb-item active").text("{{ __ "page.contents.breadcrumb.notFound" }}");
        ary.push(item);
      }else{
        const item = $("<li>").addClass("breadcrumb-item active").text("{{ __ "page.contents.breadcrumb.root" }}");
        ary.push(item);
      }
    }
    breadcrumbList.append(ary);
  }

  function chkStrTreeMoveDirectory(){
    let chk = false;
    let str = "{{ __ 'page.contents.tree.moveRootError' }}";
    const selected = $('#tree').tree('getSelectedNode');
    const target = $('#treeMoveTree').tree('getSelectedNode');
    if (!selected) {
      str = "{{ __ 'page.contents.tree.moveNotSelectError' }}";
    } else if (!target) {
      let node = $('#treeMoveTree').tree('getTree');
      chk = true;
      for(const child of node.children) {
        if (child.name === selected.name) {
          str = format_string("{{ __ 'page.contents.tree.moveDupError' }}", "{{ __ 'page.contents.tree.root' }}");
          chk = false;
        }
      }
      if (chk){
        str = format_string("{{ __ 'page.contents.tree.moveNext' }}", "{{ __ 'page.contents.tree.root' }}");
      }
    } else if (selected && target) {
      if (selected.id === target.id) {
        str = "{{ __ 'page.contents.tree.moveToSelfError' }}";
      } else if (selected.parent &&  selected.parent.id === target.id) {
        str = "{{ __ 'page.contents.tree.moveCurrentError' }}";
      } else {
        let node = target;
        chk = true;
        const tree = [];
        while (node.parent) {
          if (node.id === selected.id) {
            str = "{{ __ 'page.contents.tree.moveToChildError' }}";
            chk = false;
          }
          tree.unshift(node.name);
          node = node.parent;
        }
        if (chk){
          node = target;
          for(const child of node.children) {
            if (child.name === selected.name) {
              const tree = [];
              {
                let node = target;
                while (node.parent) {
                  tree.unshift(node.name);
                  node = node.parent;
                }
              }
              str = format_string("{{ __ 'page.contents.tree.moveDupError' }}", tree.join(" / "));
              chk = false;
            }
          }
          if (chk) {
            str = format_string("{{ __ 'page.contents.tree.moveNext' }}", tree.join(" / "));
          }
        }
      }
    }
    return {chk,str};
  }

  addEventListener("load", (event) => {
    const icon1 = document.createElement("i");
    icon1.classList.add("material-icons");
    icon1.textContent = "chevron_right";
    const icon2 = document.createElement("i");
    icon2.classList.add("material-icons");
    icon2.textContent = "expand_more";
    $('#tree').tree({
      closedIcon: icon1,
      openedIcon: icon2,
      saveState: 'contents-tree-dashboard',
      showEmptyFolder: true
    }); 
    $("#tree").on(
      'tree.select',
      function(event) {
        contentsPage = 0;
        loadTagCloud(false);
        if ($('#tree').tree('getSelectedNode')) {
          $('#treeMoveButton').prop('disabled', false);
          $('#treeRenameButton').prop('disabled', false);
        } else {
          $('#treeMoveButton').prop('disabled', true);
          $('#treeRenameButton').prop('disabled', true);
        }
      }
    );
    $("#tree").on(
      'tree.init',
      function() {
        loadTagCloud(true);
      }
    );
    $("#tagcloud")[0].addEventListener("click", clickTagCloud);

    $("#tree").tree("loadDataFromUrl","{{baseUrl}}/api/contents/tree");

    $('#treeMoveTree').tree({
      closedIcon: icon1,
      openedIcon: icon2,
      saveState: false,
      showEmptyFolder: true
    }); 
    $("#treeMoveTree").on(
      'tree.select',
      function(event) {
        const {chk,str} = chkStrTreeMoveDirectory();
        $("#treeMoveName").text(str);
        $("#treeMoveSubmit").prop("disabled", !chk);
      });
    $("#treeMoveTree").tree("loadDataFromUrl","{{baseUrl}}/api/contents/tree");

    $("#treeAdd").on("show.bs.modal", function() {
      let name = "{{ __ 'page.contents.tree.root' }}";
      if ($("#tree").tree('getSelectedNode')) {
        name = $("#tree").tree('getSelectedNode').name;
      }
      $("#treeAddTarget").text(format_string("{{ __ 'page.contents.tree.addCurrent' }}", name));
      let descName = "{{ __ 'page.contents.tree.root' }}";
      if ($("#tree").tree('getSelectedNode')) {
        const tree = [];
        let node = $("#tree").tree('getSelectedNode');
        while (node.parent) {
          tree.unshift(node.name);
          node = node.parent;
        }
        descName = tree.join(" / ");
      }
      $("#treeAddDescription").text(format_string("{{ __ 'page.contents.tree.addCurrentDesc' }}", descName));
      $("#treeAddCurrent").text(descName + " /");
      $("#treeAddSubmit").prop("disabled", false);
      $("#treeDoAddText").removeClass("d-none");
      $("#treeDoAddSpinner").addClass("d-none");
      $("#treeAddFormName").val("");
      $("#treeAddFormDesc").val("");
    });
    $("#treeMove").on("shown.bs.modal", function() {
      $("#treeMoveTree").tree("loadDataFromUrl","{{baseUrl}}/api/contents/tree");
      if (!$("#tree").tree('getSelectedNode')) {
        alert("{{ __ 'page.contents.tree.moveNotSelectError' }}");
        $("#treeMove").modal("hide");
        return;
      }
      const tree = [];
      let node = $("#tree").tree('getSelectedNode');
      node = node.parent;
      while (node.parent) {
        tree.unshift(node.name);
        node = node.parent;
      }
      let descName = tree.join(" / ");
      if (tree.length === 0) {
        descName = "{{ __ 'page.contents.tree.root' }}";
      }
      const name = $("#tree").tree('getSelectedNode').name;
      $("#treeMoveTree").tree("selectNode", $("#treeMoveTree").tree('getNodeById', $("#tree").tree('getSelectedNode').id), false);
      $("#treeMoveNameCurrent").text(format_string("{{ __ 'page.contents.tree.moveNameCurrent' }}", descName));

      $("#treeMoveSubmit").prop("disabled", false);
      $("#treeDoMoveText").removeClass("d-none");
      $("#treeDoMoveSpinner").addClass("d-none");
      $("#treeMoveTarget").text(format_string("{{ __ 'page.contents.tree.moveCurrent' }}", name));
      $("#treeMoveDescription").text(format_string("{{ __ 'page.contents.tree.moveCurrentDesc' }}", name));
      const {chk,str} = chkStrTreeMoveDirectory();
      $("#treeMoveName").text(str);
      $("#treeMoveSubmit").prop("disabled", !chk);
    });
    $("#treeRename").on("show.bs.modal", function() {
      let name = "{{ __ 'page.contents.tree.root' }}";
      if ($("#tree").tree('getSelectedNode')) {
        name = $("#tree").tree('getSelectedNode').name;
      }
      $("#treeAddTarget").text(format_string("{{ __ 'page.contents.tree.addCurrent' }}", name));
      let descName = "{{ __ 'page.contents.tree.root' }}";
      if ($("#tree").tree('getSelectedNode')) {
        const tree = [];
        let node = $("#tree").tree('getSelectedNode');
        while (node.parent) {
          tree.unshift(node.name);
          node = node.parent;
        }
        descName = tree.join(" / ");
      }
      $("#treeRenameDescription").text(format_string("{{ __ 'page.contents.tree.renameCurrentDesc' }}", descName));
      $("#treeRenameCurrent").text(descName + " /");
      $("#treeRenameSubmit").prop("disabled", false);
      $("#treeDoRenameText").removeClass("d-none");
      $("#treeDoRenameSpinner").addClass("d-none");
      $("#treeRenameFormName").val("");
      $("#treeRenameFormDesc").val("");
      $("#treeRenameBodyLoading").removeClass("d-none");
      $("#treeRenameBody").addClass("d-none");
    });
    $("#treeRename").on("shown.bs.modal", function() {
      if (!$("#tree").tree('getSelectedNode')){
        alert("{{ __ 'page.contents.tree.renameNotSelectError' }}")
        $("#treeRename").modal("hide");
        return;
      }
      $.ajax({
        url: "{{baseUrl}}/api/meta/treeInfo",
        method: "GET",
        data: {
          dir_id: $("#tree").tree('getSelectedNode') ? $("#tree").tree('getSelectedNode').id : ''
        },
        success: function(data) {
          if (data && data.error) {
            alert("Error: " + data.error);
            $("#treeRename").modal("hide");
          }else{
            $("#treeRenameCurrent").val(data.display_name);
            $("#treeRenameFormName").val(data.display_name);
            $("#treeRenameFormDesc").val(data.description);
            $("#treeRenameFirstSortKey").val(data.first_sort_key);
            $("#treeRenameSecondSortKey").val(data.second_sort_key);
            $("#treeRenameBodyLoading").addClass("d-none");
            $("#treeRenameBody").removeClass("d-none");
          }
        },
        error: function(xhr, status, error) {
          alert("Error: " + error);
          $("#treeRename").modal("hide");
        }
      });
    });
    $('#threadCreate').on('shown.bs.modal', function () {
      threadCreateTargetId = '';
      if ($("#tree").tree('getSelectedNode')) {
        threadCreateTargetId = $("#tree").tree('getSelectedNode').id;
      }
    });
  });

  function addTreeNode(){
    const name = $("#treeAddFormName").val();
    if (name.includes(' > ')) {
      alert("{{{ __ 'page.contents.tree.addNameError' }}}");
      return false;
    }
    $("#treeAddSubmit").prop("disabled", true);
    $("#treeDoAddText").addClass("d-none");
    $("#treeDoAddSpinner").removeClass("d-none");
    const parent = $("#tree").tree('getSelectedNode');
    let parentId = "";
    if (parent) {
      parentId = parent.id;
    }
    $.ajax({
      url: "{{baseUrl}}/api/contents/addTree",
      type: "POST",
      data: {
        name: $("#treeAddFormName").val(),
        description: $("#treeAddFormDesc").val(),
        parent: parentId,
        firstSortKey: $("#treeAddFirstSortKey").val(),
        secondSortKey: $("#treeAddSecondSortKey").val(),
        _csrf: "{{ _csrf }}"
      },
      success: function(data) {
        if (data && data.error) {
          alert("Error: " + data.error);
        }else{
          $("#treeAdd").modal("hide");
          $("#tree").tree("loadDataFromUrl","{{baseUrl}}/api/contents/tree");
        }
      },
      error: function(xhr, status, error) {
        alert("Error: " + error);
      },
      complete: function() {
        $("#treeAddSubmit").prop("disabled", false);
        $("#treeDoAddText").removeClass("d-none");
        $("#treeDoAddSpinner").addClass("d-none");
      }
    });
    return false;
  }
  function renameTreeNode(){
    const name = $("#treeRenameFormName").val();
    if (name.includes(' > ')) {
      alert("{{{ __ 'page.contents.tree.renameNameError' }}}");
      return false;
    }
    $("#treeRenameSubmit").prop("disabled", true);
    $("#treeDoRenameText").addClass("d-none");
    $("#treeDoRenameSpinner").removeClass("d-none");
    $.ajax({
      url: "{{baseUrl}}/api/contents/renameTree",
      type: "POST",
      data: {
        dir_id: $("#tree").tree('getSelectedNode') ? $("#tree").tree('getSelectedNode').id : '',
        name: $("#treeRenameFormName").val(),
        description: $("#treeRenameFormDesc").val(),
        firstSortKey: $("#treeRenameFirstSortKey").val(),
        secondSortKey: $("#treeRenameSecondSortKey").val(),
        _csrf: "{{ _csrf }}"
      },
      success: function(data) {
        if (data && data.error) {
          alert("Error: " + data.error);
        }else{
          $("#treeRename").modal("hide");
          $("#tree").tree("loadDataFromUrl","{{baseUrl}}/api/contents/tree");
        }
      },
      error: function(xhr, status, error) {
        alert("Error: " + error);
      },
      complete: function() {
        $("#treeRenameSubmit").prop("disabled", false);
        $("#treeDoRenameText").removeClass("d-none");
        $("#treeDoRenameSpinner").addClass("d-none");
      }
    });
  }
  function moveTreeNode(){
    $("#treeMoveSubmit").prop("disabled", true);
    $("#treeDoMoveText").addClass("d-none");
    $("#treeDoMoveSpinner").removeClass("d-none");
    $.ajax({
      url: "{{baseUrl}}/api/contents/moveTree",
      type: "POST",
      data: {
        dir_id: $("#tree").tree('getSelectedNode') ? $("#tree").tree('getSelectedNode').id : '',
        target_id: $("#treeMoveTree").tree('getSelectedNode') ? $("#treeMoveTree").tree('getSelectedNode').id : '',
        _csrf: "{{ _csrf }}"
      },
      success: function(data) {
        if (data && data.error) {
          alert("Error: " + data.error);
        }else{
          $("#treeMove").modal("hide");
          $("#tree").tree("loadDataFromUrl","{{baseUrl}}/api/contents/tree");
          $("#treeMoveTree").tree("loadDataFromUrl","{{baseUrl}}/api/contents/tree");
        }
      },
      error: function(xhr, status, error) {
        alert("Error: " + error);
      },
      complete: function() {
        $("#treeMoveSubmit").prop("disabled", false);
        $("#treeDoMoveText").removeClass("d-none");
        $("#treeDoMoveSpinner").addClass("d-none");
      }
    });
    return false;
  }
  function treeShowSubItemsChange(){
    if ($('#treeShowSubItems').is(':checked')){
      contentsCountPerPage = 50;
    }else{
      contentsCountPerPage = 10;
    }
    contentsPage = 0;
    loadTagCloud(false);
    updatePagination();
    loadContents();
  }
</script>

<!-- modal -->
<!-- tree add -->
<div class="modal fade modal-xl" id="treeAdd" data-bs-keyboard="false" tabindex="-1" aria-labelledby="treeAdddropLabel">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="treeAddLabel">{{ __ 'page.contents.tree.add' }}</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form>
          <h3 id="treeAddTarget"></h3>
          <p id="treeAddDescription"></p>
          <hr>
          <div class="text-bg-danger text-center">{{ __ 'page.contents.tree.addInfo' }}</div>
          <br>
          <div>
            <label for="treeAddFormName" class="form-label">{{ __ 'page.contents.tree.addName' }} *</label>
            <div class="input-group">
              <span class="input-group-text" id="treeAddCurrent">{{ __ 'page.contents.tree.addName' }}</span>
              <input type="text" class="form-control" id="treeAddFormName" required>
            </div>
            <label for="treeAddFormDesc" class="form-label">{{ __ 'page.contents.tree.addDesc' }}</label>
            <div class="input-group">
              <textarea class="form-control" id="treeAddFormDesc"></textarea>
            </div>
          </div>
          <hr>
          <p>{{ __ 'page.contents.tree.addDetail' }}</p>
          <div>
            <div class="col">
              <label for="treeAddFirstSortKey" class="form-label">{{ __ 'page.contents.tree.addFirstSortKey' }}</label>
              <input type="number" class="form-control" id="treeAddFirstSortKey" step="1" max="999999999" min="-999999999">
            </div>
            <div class="col">
              <label for="treeAddSecondSortKey" class="form-label">{{ __ 'page.contents.tree.addSecondSortKey' }}</label>
              <input type="text" class="form-control" id="treeAddSecondSortKey">
            </div>
          </div>
          <div class="text-end">{{ __ 'page.contents.tree.addEssDesc' }}</div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">{{ __ 'page.contents.tree.modalClose' }}</button>
            <button type="button" class="btn btn-primary" id="treeAddSubmit" onclick="return addTreeNode();">
              <span id="treeDoAddText">{{ __ 'page.contents.tree.doAdd' }}</span>
              <span id="treeDoAddSpinner" class="d-none">
                <span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span>
                {{ __ 'page.contents.tree.adding' }}
              </span>
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>
<!-- tree move -->
<div class="modal fade modal-xl" id="treeMove" data-bs-keyboard="false" tabindex="-1" aria-labelledby="treeMoveLabel">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="treeMoveLabel">{{ __ 'page.contents.tree.move' }}</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form>
          <h3 id="treeMoveTarget"></h3>
          <p id="treeMoveDescription"></p>
          <hr>
          <p id="treeMoveNameCurrent"></p>
          <p id="treeMoveName"></p>
          <div class="row">
            <div id="treeMoveTargetTree" class="col align-items-center">
              <div id="treeMoveTree" data-url="{{baseUrl}}/api/contents/tree"></div>
            </div>
            <div id="treeMoveBody" class="col">
            </div>
          </div>
          <div class="text-end">{{ __ 'page.contents.tree.moveEssDesc' }}</div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">{{ __ 'page.contents.tree.modalClose' }}</button>
            <button type="button" class="btn btn-primary" id="treeMoveSubmit" onclick="return moveTreeNode();">
              <span id="treeDoMoveText">{{ __ 'page.contents.tree.doMove' }}</span>
              <span id="treeDoMoveSpinner" class="d-none">
                <span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span>
                {{ __ 'page.contents.tree.moving' }}
              </span>
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>
<!-- tree rename -->
<div class="modal fade modal-xl" id="treeRename" data-bs-keyboard="false" tabindex="-1" aria-labelledby="treeRenameLabel">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="treeRenameLabel">{{ __ 'page.contents.tree.rename' }}</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form>
          <h3 id="treeRenameTarget"></h3>
          <p id="treeRenameDescription"></p>
          <hr>
          <div id="treeRenameBodyLoading" class="d-flex align-items-center">
            <div class="spinner-border" role="status"></div>
            &nbsp; &nbsp;
            {{ __ 'page.contents.tree.renameDataLoading' }}
          </div>
          <div id="treeRenameBody">
            <label for="treeRenameCurrent" class="form-label">{{ __ 'page.contents.tree.renameNameCurrent' }}</label>
            <div class="input-group">
              <input type="text" class="form-control" id="treeRenameCurrent" disabled readonly>
            </div>
            <label for="treeRenameFormName" class="form-label">{{ __ 'page.contents.tree.renameName' }} *</label>
            <div class="input-group">
              <input type="text" class="form-control" id="treeRenameFormName" required>
            </div>
            <label for="treeRenameFormDesc" class="form-label">{{ __ 'page.contents.tree.renameDesc' }}</label>
            <div class="input-group">
              <textarea class="form-control" id="treeRenameFormDesc"></textarea>
            </div>
          </div>
          <hr>
          <p>{{ __ 'page.contents.tree.renameDetail' }}</p>
          <div>
            <div class="col">
              <label for="treeRenameFirstSortKey" class="form-label">{{ __ 'page.contents.tree.renameFirstSortKey' }}</label>
              <input type="number" class="form-control" id="treeRenameFirstSortKey" step="1" max="999999999" min="-999999999">
            </div>
            <div class="col">
              <label for="treeRenameSecondSortKey" class="form-label">{{ __ 'page.contents.tree.renameSecondSortKey' }}</label>
              <input type="text" class="form-control" id="treeRenameSecondSortKey">
            </div>
          </div>
          <div class="text-end">{{ __ 'page.contents.tree.renameEssDesc' }}</div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">{{ __ 'page.contents.tree.modalClose' }}</button>
            <button type="button" class="btn btn-primary" id="treeRenameSubmit" onclick="return renameTreeNode();">
              <span id="treeDoRenameText">{{ __ 'page.contents.tree.doRename' }}</span>
              <span id="treeDoRenameSpinner" class="d-none">
                <span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span>
                {{ __ 'page.contents.tree.renaming' }}
              </span>
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>
{{> contents/threadMenuModal }}
{{> contents/threadCreateModal }}

<!-- main -->
<div class="container-fluid">
  <div class="row">
    <div class="col-md-2 leftmenu">
      <div class="row">
        <div class="col align-items-center">
          <div id="tagcloud" class="tagcloud"></div> 
          <div id="noTags" class="d-none">{{ __ "page.contents.tagCloud.noTags" }}</div>
        </div>
      </div>
      <div id="treeviewArea">
        <div class="input-group">
          <input type="text" id="treeKeyword" class="form-control form-control-sm" placeholder="{{ __ 'page.contents.tree.search' }}" aria-label="Search" aria-describedby="button-addon2" onkeyup="if($('#treeKeyword').val() === '' || event.key === 'Enter'){ searchTree(); }">
          <button class="btn btn-outline-secondary btn-sm" type="button" onclick="searchTree()">{{ __ 'page.contents.tree.searchButton' }}</button>
        </div>
        <div class="form-check form-switch form-control-sm">
          <input class="form-check-input" type="checkbox" role="switch" id="treeShowSubItems" onchange="treeShowSubItemsChange()">
          <label class="form-check-label" for="treeShowSubItems">{{ __ 'page.contents.tree.showSubItems' }}</label>
        </div>
        <div id="currentTreeKeyword" class="d-none">
          <span class="">{{ __ 'page.contents.tree.searchWord' }}</span>:<span id="currentTreeKeywordText"></span>
        </div>
        <div id="tree" data-url="{{baseUrl}}/api/contents/tree"></div>
        <div id="treeControl" class="text-end">
          <button class="btn btn-outline-secondary btn-sm" type="button" data-bs-toggle="modal" data-bs-target="#treeAdd">{{ __ 'page.contents.tree.add'}}</button>
          <button class="btn btn-outline-secondary btn-sm" type="button" data-bs-toggle="modal" data-bs-target="#treeMove" id="treeMoveButton">{{ __ 'page.contents.tree.move'}}</button>
          <button class="btn btn-outline-secondary btn-sm" type="button" data-bs-toggle="modal" data-bs-target="#treeRename" id="treeRenameButton">{{ __ 'page.contents.tree.rename'}}</button>
        </div>
      </div>
    </div>
    <div class="col-md-10">
      {{#if false}}
      <nav style="--bs-breadcrumb-divider: url(&#34;data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8'%3E%3Cpath d='M2.5 0L1 1.5 3.5 4 1 6.5 2.5 8l4-4-4-4z' fill='%236c757d'/%3E%3C/svg%3E&#34;);" aria-label="breadcrumb">
        <ol class="breadcrumb">
          <li class="breadcrumb-item active"><a href="{{baseUrl}}/contents">Dashboard</a></li>
        </ol>
      </nav>
      {{/if}}
      <div class="row">
        <div class="d-flex flex-row">
          <div>
            <button class="btn btn-outline-primary btn-nano" type="button" data-bs-toggle="modal" data-bs-target="#threadCreate">{{ __ 'page.contents.index.newThread' }}</button>
          </div>
          &nbsp; : &nbsp;
          <div>
            <nav id="breadcrumb" aria-label="breadcrumb">
              <ol id="breadcrumbList" class="breadcrumb">
              </ol>
            </nav>
          </div>
        </div>
      </div>
      <div class="row text-end">
          <div id="tags"></div>
      </div>
      <section id="main_section">
        <div id="contentArea">
          <!-- Content will be loaded here -->
          {{ __ 'page.contents.index.contentArea'}}
        </div>
      </section>
      <nav aria-label="pagination">
        <ul class="pagination justify-content-center" id="pagination">
        </ul>
      </nav>
    </div>
  </div> <!-- row -->
</div>

{{> footer }}
